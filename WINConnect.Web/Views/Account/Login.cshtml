@model WINConnect.Web.Controllers.LoginModel

@using (Html.BeginForm(new { ReturnUrl = ViewBag.ReturnUrl }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "Error:", new { @class = "text-danger" })
    <div class="col-md-4">
        <fieldset>
            <legend>Use an admin account to log in</legend>
            <div class="form-group">
                @Html.LabelFor(m => m.Username)
                @Html.TextBoxFor(m => m.Username, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Username)
            </div>
            <p class="help=block">
            </p>
            <div class="form-group">
                @Html.LabelFor(m => m.Password)
                @Html.PasswordFor(m => m.Password, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Password)
            </div>
            <div class="form-group">

                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.RememberMe) Remember me
                    </label>
                </div>
            </div>
            <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
        </fieldset>
    </div>
}

@section Scripts {
    @Scripts.Render("~/scripts/jqueryval")
    <script type="text/javascript">
             /***
       $(document).ready(function () {
            var form = $('form')
                , formData = $.data(form[0])
                , settings = $.data(form[0]).validator.settings
                // Store existing event handlers in local variables
                , oldErrorPlacement = settings.errorPlacement
                , oldSuccess = settings.success;

            settings.errorPlacement = function (label, element) {

                // Call old handler so it can update the HTML
                oldErrorPlacement(label, element);

                // Add Bootstrap classes to newly added elements
                label.parents('.form-group').addClass('has-error');
                label.addClass('text-danger');
            };

            settings.success = function (label) {
                // Remove error class from <div class="form-group">, but don't worry about
                // validation error messages as the plugin is going to remove it anyway
                label.parents('.form-group').removeClass('has-error');

                // Call old handler to do rest of the work
                oldSuccess(label);
            };
        });
            */
    </script>
}
